from PIL import Image

# Function to display the image corresponding to the season
def display_photo(season):
    image_path = f"ISEimages/{season.lower()}.png"
    image = Image.open(image_path)
    image.show()

# Scenario A: Finding the season of the year
def find_season(country, month):
    seasons = {
        "Australia - Meteorological": {
            "December": "Summer",
            "January": "Summer",
            "February": "Summer",
            "March": "Autumn",
            "April": "Autumn",
            "May": "Autumn",
            "June": "Winter",
            "July": "Winter",
            "August": "Winter",
            "September": "Spring",
            "October": "Spring",
            "November": "Spring"
        },
        "Australia - The Noongar": {
            "December": "Birak",
            "January": "Birak",
            "February": "Bunuru",
            "March": "Bunuru",
            "April": "Djeran",
            "May": "Djeran",
            "June": "Makuru",
            "July": "Makuru",
            "August": "Dijiba",
            "September": "Dijiba",
            "October": "kambarang",
            "November": "kambarang"
        },
        "Japan - Meteorological": {
            "December": "Winter",
            "January": "Winter",
            "February": "Winter",
            "March": "Spring",
            "April": "Spring",
            "May": "Spring",
            "June": "Summer",
            "July": "Summer",
            "August": "Summer",
            "September": "Autumn",
            "October": "Autumn",
            "November": "Autumn"
        },
        "Spain - Meteorological": {
            "December": "Winter",
            "January": "Winter",
            "February": "Winter",
            "March": "Spring",
            "April": "Spring",
            "May": "Spring",
            "June": "Summer",
            "July": "Summer",
            "August": "Summer",
            "September": "Autumn",
            "October": "Autumn",
            "November": "Autumn"
        },
        "Mauritius - Meteorological": {
            "December": "Summer",
            "January": "Summer",
            "February": "Summer",
            "March": "Summer",
            "April": "Summer",
            "May": "Autumn",
            "June": "Winter",
            "July": "Winter",
            "August": "Winter",
            "September": "Winter",
            "October": "Spring",
            "November": "Summer"
        },
        "Malaysia- Meteorological": {
            "December": "Northeast Monsoon",
            "January": "Northeast Monsoon",
            "February": "Northeast Monsoon",
            "March": "Inter-monsoon",
            "April": "Inter-monsoon",
            "May": "Southeast monsoon",
            "September": "Southeast monsoon",
            "October": "Inter-monsoon",
            "November": "Inter-monsoon"
        },
                "Malaysia- Meteorological": {
            "December": "Northeast Monsoon",
            "January": "Northeast Monsoon",
            "February": "Northeast Monsoon",
            "March": "Inter-monsoon",
            "April": "Inter-monsoon",
            "May": "Southeast monsoon",
            "September": "Southeast monsoon",
            "October": "Inter-monsoon",
            "November": "Inter-monsoon"
        }
        
    }
    
    if country in seasons and month in seasons[country]:
        season = seasons[country][month]
        display_photo(season)
        return season
    else:
        return "Season information not available for the given country and month."

# Scenario B: Comparing temperature readings

def compare_temperature(city, temperature, time):
    temperatures = {
        "Perth": {
            "Morning": {
                "min": 0.7,
                "max": 46.0,
                "mean": 18.2
            },
            "Afternoon": {
                "min": 0.7,
                "max": 46.0,
                "mean": 23.0
            }
        }
    }    
    
    
    if city in temperatures and time in temperatures[city]:
        min_temp = temperatures[city][time]["min"]
        max_temp = temperatures[city][time]["max"]
        mean_temp = temperatures[city][time]["mean"]

        if temperature > max_temp:
            return f"The temperature is {temperature:.1f}째C, which is higher than the expected maximum temperature of {max_temp:.1f}째C."
        elif temperature < min_temp:
            return f"The temperature is {temperature:.1f}째C, which is lower than the expected minimum temperature of {min_temp:.1f}째C."
        else:
            if temperature > mean_temp:
                return "The temperature is above the mean temperature for the given city and time."
            elif temperature < mean_temp:
                return "The temperature is below the mean temperature for the given city and time."
            else:
                return "The temperature is equal to the mean temperature for the given city and time."
    else:
        return "Temperature information not available for the given city or time."

 
# Test the functions

# Scenario A
country = input("Enter the country name: ")
month = input("Enter the month: ")
season = (find_season(country, month))
print(f"The season in {country} during {month} is {season}.")


# Scenario B
city = input("Enter the city name: ")
temperature = float(input("Enter the temperature: "))
time = input("Enter the time (Morning/Afternoon): ")
print(compare_temperature(city, temperature, time))
